// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/reddtsai/goAPI/pkg/blockaction/storage"
)

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIStorage) CreateUser(entity storage.UserTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIStorageMockRecorder) CreateUser(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIStorage)(nil).CreateUser), entity)
}

// GetUser mocks base method.
func (m *MockIStorage) GetUser(id int64) (storage.UserTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(storage.UserTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIStorageMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIStorage)(nil).GetUser), id)
}

// GetUserByAccount mocks base method.
func (m *MockIStorage) GetUserByAccount(account string) (storage.UserTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAccount", account)
	ret0, _ := ret[0].(storage.UserTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAccount indicates an expected call of GetUserByAccount.
func (mr *MockIStorageMockRecorder) GetUserByAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAccount", reflect.TypeOf((*MockIStorage)(nil).GetUserByAccount), account)
}

// IsExistUserAccount mocks base method.
func (m *MockIStorage) IsExistUserAccount(account string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistUserAccount", account)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistUserAccount indicates an expected call of IsExistUserAccount.
func (mr *MockIStorageMockRecorder) IsExistUserAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistUserAccount", reflect.TypeOf((*MockIStorage)(nil).IsExistUserAccount), account)
}
